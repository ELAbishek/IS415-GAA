---
title: Take home assignment 2
date: "`r Sys.Date()`"
format: html
execute: 
  message: false
  warning: false
editor: visual
---

# Imports

## Import packages

```{r}
pacman::p_load(plyr, sf, tidyverse, readxl, tmap, maptools, kableExtra)
```

## Import data

### Import Geospatial data

```{r}
jkt_sf <- st_read(dsn="data/geospatial",
                      layer="BATAS_DESA_DESEMBER_2019_DUKCAPIL_DKI_JAKARTA")
```

### Import Aspatial data

Since we need monthly vaccination rate, we will be taking all the vaccination data from July 2021 to June 2022

```{r}
oct2021 <- read_xlsx("data/aspatial/Data Vaksinasi Berbasis Kelurahan (31 Oktober 2021).xlsx")
may2021 <- read_xlsx("data/aspatial/Data Vaksinasi Berbasis Kelurahan (31 Mei 2022).xlsx")
march2022 <- read_xlsx("data/aspatial/Data Vaksinasi Berbasis Kelurahan (31 Maret 2022).xlsx")
july2021 <- read_xlsx("data/aspatial/Data Vaksinasi Berbasis Kelurahan (31 Juli 2021).xlsx")
jan2022 <- read_xlsx("data/aspatial/Data Vaksinasi Berbasis Kelurahan (31 Januari 2022).xlsx")
dec2021 <- read_xlsx("data/aspatial/Data Vaksinasi Berbasis Kelurahan (31 Desember 2021).xlsx")
aug2021 <- read_xlsx("data/aspatial/Data Vaksinasi Berbasis Kelurahan (31 Agustus 2021).xlsx")
sept2021 <- read_xlsx("data/aspatial/Data Vaksinasi Berbasis Kelurahan (30 September 2021).xlsx")
nov2021 <- read_xlsx("data/aspatial/Data Vaksinasi Berbasis Kelurahan (30 November 2021).xlsx")
june2022 <- read_xlsx("data/aspatial/Data Vaksinasi Berbasis Kelurahan (30 Juni 2022).xlsx")
april2022 <- read_xlsx("data/aspatial/Data Vaksinasi Berbasis Kelurahan (30 April 2022).xlsx")
feb2021 <- read_xlsx("data/aspatial/Data Vaksinasi Berbasis Kelurahan (27 Februari 2022).xlsx")
```

# Data pre-processing

```{r}
jkt_sf <- jkt_sf %>% filter(`KAB_KOTA` %in% c('JAKARTA BARAT',
                                              'JAKARTA PUSAT',
                                              'JAKARTA SELATAN',
                                              'JAKARTA TIMUR',
                                              'JAKARTA UTARA'))
```

We are excluding the islands from the data. We do that by filtering out just the mainland cities

## Checking for NA values

```{r}
jkt_sf[rowSums(is.na(jkt_sf))!=0,]
```

No NA values were found in any records, so we can proceed with our analysis

## Translation

I realized pretty quickly that if I were to continue working with data in a language I am not very proficient in, this whole analysis could become very tedious, so for convenience sake, I will be performing translation of the data

```{r}
jkt_sf <- jkt_sf %>% 
  dplyr::rename(
    Object_ID=OBJECT_ID,
    Province=PROVINSI, 
    City=KAB_KOTA, 
    District=KECAMATAN, 
    Village_Code=KODE_DESA, 
    Village=DESA, 
    Sub_District=DESA_KELUR,
    Code=KODE, 
    Total_Population=JUMLAH_PEN
    )

```

Nice, now the relevant columns are in English

## Trying aspatial import stuff

```{r}
aspatial_preprocess <- function(filepath){
  result_file <- read_xlsx(filepath, .name_repair="minimal")

  result_file <- result_file[, !duplicated(colnames(result_file), fromLast = TRUE)] 
  startpoint <- gregexpr(pattern="Kelurahan", filepath)[[1]] + 8
  endpoint <- gregexpr(pattern=")", filepath)[[1]] - 2
  result_file$Date <- substr(filepath, startpoint, endpoint)
  
  # Retain the Relevant Columns
  result_file <- result_file %>% 
    select("Date", 
           "KODE KELURAHAN", 
           "WILAYAH KOTA", 
           "KECAMATAN", 
           "KELURAHAN", 
           "SASARAN", 
           "BELUM VAKSIN",
           "JUMLAH\r\nDOSIS 1",
           "JUMLAH\r\nDOSIS 2",
           "TOTAL VAKSIN\r\nDIBERIKAN"
)
  return(result_file)
}
```

```{r}
# in the folder 'data/aspatial', find files with the extension '.xlsx' and add it to our fileslist 
# the full.names=TRUE prepends the directory path to the file names, giving a relative file path - otherwise, only the file names (not the paths) would be returned 
# reference: https://stat.ethz.ch/R-manual/R-devel/library/base/html/list.files.html
fileslist <-list.files(path = "data/aspatial", pattern = "*.xlsx", full.names=TRUE)

# afterwards, for every element in fileslist, apply aspatial_process function
dflist <- lapply(seq_along(fileslist), function(x) aspatial_preprocess(fileslist[x]))
```

```{r}
cases_jakarta <- ldply(dflist, data.frame)
```
