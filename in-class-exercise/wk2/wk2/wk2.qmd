---
title: In-class Exercise 2
date: "`r Sys.Date()`"
format: html
execute: 
  message: false
  warning: false
editor: visual
---

```{r}
#! code-fold: true
#! code-summary: "Show the code"
pacman::p_load(sf, tidyverse, funModeling)
```

## Aspatial data

```{r}
wp_nga <- read_csv("aspatial/WPdx.csv") %>%
  filter(`#clean_country_name` == "Nigeria")
wp_nga$Geometry = st_as_sfc(wp_nga$`New Georeferenced Column`)
wp_nga
wp_sf <- st_sf(wp_nga, crs=4326)
wp_sf
wp_sf <- wp_sf %>%
  st_transform(crs = 26392)
```

## Geospatial data

```{r}
geoNGA <- st_read(dsn = "geospatial", 
                  layer = "geoBoundaries-NGA-ADM2")%>%
  st_transform(crs = 26392)
NGA <- st_read("geospatial",
               layer = "nga_admbnda_adm2")%>%
  st_transform(crs = 26392)
```

# Data processing

```{r}
wp_nga$Geometry = st_as_sfc(wp_nga$`New Georeferenced Column`)
glimpse(wp_nga)

wp_sf <- st_sf(wp_nga, crs=4326)
wp_sf
```

# Transformation

```{r}
wp_sf <- wp_sf %>%
  st_transform(crs = 26392)
```

```{r}
duplicated_LGA <- NGA$ADM2_EN[duplicated(NGA$ADM2_EN)==TRUE]

duplicated_indices <- which(NGA$ADM2_EN %in% duplicated_LGA)

for (ind in duplicated_indices) {
  NGA$ADM2_EN[ind] <- paste(NGA$ADM2_EN[ind], NGA$ADM1_EN[ind], sep=", ")
}
```

# Calculate proportion of functional to non functional waterpoints

```{r}
wp_sf_nga <- wp_sf %>%
  rename(status_clean = '#status_clean') %>%
  select(status_clean) %>%
  mutate(status_clean = replace_na(
    status_clean, "unknown"
  ))
```

```{r}
WP_Functional <- wp_sf_nga %>%
  filter(status_clean %in%
           c("Functional",
             "Functional but not in use,
             Functional but needs repair"))
```

```{r}
wp_nonfunctional <- wp_sf_nga %>%
  filter(status_clean %in%
           c("Abandoned/Decommissioned",
             "Abandoned",
             "Non-Functional due to dry season",
             "Non-Functional",
             "Non functional due to dry season"))
```

```{r}
unique(wp_sf$`#status_clean`)

functional <- wp_sf %>% filter(`#status_clean` == "Functional") 
WP_Functional <- lengths(st_intersects(geoNGA, functional))

non_functional <- wp_sf %>% filter(`#status_clean` == "Non-Functional")
WP_Non_Functional <- lengths(st_intersects(geoNGA, non_functional))

WP_Total <- lengths(st_intersects(geoNGA, wp_sf))
```

# Combine spatial and aspatial data

```{r}
nga_combined <- tibble(geoNGA, WP_Functional, WP_Non_Functional, WP_Total)
```

```{r}
nga_combined <- nga_combined %>%
  mutate(`WP_Functional_Proportion` = `WP_Functional`/`WP_Total`,
         `WP_Non_Functional_Proportion` = `WP_Non_Functional`/`WP_Total`)
```

```{r}
nga_combined$`WP_Functional_Proportion`[is.na(nga_combined$`WP_Functional_Proportion`)] = 0

nga_combined$`WP_Non_Functional_Proportion`[is.na(nga_combined$`WP_Non_Functional_Proportion`)] = 0
```

```{r}
head(nga_combined, n=5)
```

# Visualizing the data

```{r}
ggplot(data=nga_combined, 
       aes(x= as.numeric(`WP_Total`)))+
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue") +
  labs(title = "Distribution of Total Water Points",
       x = "Number of Water Points",
       y = "Number of LGAs")
```

```{r}
ggplot(data=nga_combined, 
       aes(y = `WP_Total`, 
           x= as.numeric(`WP_Functional_Proportion`)))+
  geom_point(color="violet") +
  labs(x = "Proportion Functional",
       y = "Total Water Points")
```
